---
---

<style>
  /* Style for the abstract section */
  .abstract-content {
    font-family: 'Noto Sans', sans-serif;
    font-size: 1rem;
    line-height: 1.6;
    text-align: justify;
  }

  h2 {
    text-align: center;
    font-family: 'Noto Sans', sans-serif;
    font-size: 1.5rem;
  }

  /* Add some margin for better readability */
  .abstract-content p {
    margin-bottom: 1.2rem;
  }

  /* Hyperlink styles */
  .abstract-content a {
    color: hsl(204, 86%, 53%) !important;
    text-decoration: none;
  }

  .abstract-content a:hover {
    text-decoration: underline;
  }
</style>

<h2>Abstract</h2>

<div class="abstract-content">
  <p>
    Recent advancements in large language models (LLMs) have significantly enhanced the ability of LLM-based systems to perform complex tasks through natural language processing and tool interaction. However, optimizing these LLM-based systems for specific tasks remains challenging, often requiring manual interventions like prompt engineering and hyperparameter tuning. Existing automatic optimization methods, such as textual feedback-based techniques (e.g., TextGrad), tend to focus on immediate feedback, analogous to using immediate derivatives in traditional numerical gradient descent. However, relying solely on such feedback can be limited when the adjustments made in response to this feedback are either too small or fluctuate irregularly, potentially slowing down or even stalling the optimization process.
  </p>

  <p>
    To overcome these challenges, more adaptive methods are needed, especially in situations where the systemâ€™s response is evolving slowly or unpredictably. In this paper, we introduce <strong>REVOLVE</strong>, an optimization method that tracks how <strong>R</strong>esponses <strong>EVOLVE</strong> across iterations in LLM systems. By focusing on the evolution of responses over time, REVOLVE enables more stable and effective optimization by making thoughtful, progressive adjustments at each step. We evaluate the effectiveness of REVOLVE across three tasks: prompt optimization, solution optimization, and code optimization. Experimental results demonstrate that REVOLVE outperforms competitive baselines, achieving a <strong>7.8%</strong> improvement in prompt optimization, a <strong>20.72%</strong> gain in solution refinement, and a <strong>29.17%</strong> increase in code optimization. Additionally, REVOLVE converges in fewer iterations, resulting in significant computational savings. These advantages highlight its adaptability and efficiency, positioning REVOLVE as a valuable tool for optimizing LLM-based systems and accelerating the development of next-generation AI technologies.
  </p>
</div>
